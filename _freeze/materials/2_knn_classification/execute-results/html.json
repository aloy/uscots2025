{
  "hash": "364c893c88737dea3f6bb605c0888602",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Classification using KNN\"\nauthor: \"Jaime Davila and Adam Loy\"\ndate: \"Last updated:\"\noutput:\n  pdf_document: default\n  html_document: default\neditor_options:\n  chunk_output_type: console\n---\n\n\n\n\n\n## Intended Learning Outcomes\n\nBy the end of this activity, you will be able to:\n\n* Fit a KNN classifier using the {tidymodels} framework\n* Predict the class label for a new observation using a fitted KNN classifier\n* Evaluate the performance of a KNN classifier using accuracy, sensitivity, and specificity\n\n## Data set\n\nThis activity is inspired by the following blog post from [Julia Silge](https://juliasilge.com/blog/scooby-doo/). We will be using a data set collected from the popular animated series, Scooby Doo. Specifically, we'll build a KNN model to predict whether a monster is real or not.\n\nTo begin, you can load the data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscooby <- read_csv(\"scooby.csv\", col_types = \"ddfcd\")\n```\n:::\n\n\n\nand take a `glimpse()` at it:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(scooby)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 501\nColumns: 5\n$ year_aired      <dbl> 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969, …\n$ imdb            <dbl> 8.1, 8.1, 8.0, 7.8, 7.5, 8.4, 7.6, 8.2, 8.1, 8.0, 8.5,…\n$ monster_real    <fct> fake, fake, fake, fake, fake, fake, fake, fake, fake, …\n$ title           <chr> \"What a Night for a Knight\", \"A Clue for Scooby Doo\", …\n$ suspects_amount <dbl> 2, 2, 0, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 3, 3, 2, …\n```\n\n\n:::\n:::\n\n\n\n*Teaching note:* This is a \"clean\" version of the data set. If you want to see the original data set, you can load it from the [Tidy Tuesday Github Repo]( https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-07-13/scoobydoo.csv). The original data set has some missing values, many logical columns that should be converted to more useful factor variables, and many columns not used in this analysis. If you want to focus on the full data analysis cycle, then you could start with the this raw data set.\n\n\nNow that the data set is loaded, let's split our data set into a training and testing set. We'll use 75% of the data for training and 25% for testing. We will also stratify our data set by the `monster_real` column to ensure that the training and testing sets have a similar breakdown of real and fake monsters. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Be sure to run the setup chunk at the top of the document first!\nset.seed(1234)\nscooby_split <- initial_split(scooby, prop = 0.75, strata = monster_real)\nscooby_train <- training(scooby_split)\nscooby_test <- testing(scooby_split)\n```\n:::\n\n\n\n\n## Classification and KNN\n\nWe are interested in determining whether the monster in the episode is real or fake. To do this we will use the year that the episode was aired (`year_aired`) and the rating the episode got on `imdb`.\n\n\n**Your turn 1**: Create a scatterplot of `imdb_rating` vs. `year` and color the points by `real_monster`. What do you observe?\n\n**Your turn 2**: A KNN classifier assigns a new observation a label based on the labels of the `k` closest observations using a *majority vote*. In the scatterplot below there are two new observations marked with a black `x`. For each of the new observations, determine whether a KNN classifier would label the observation as a real monster or not based on the following values of `k`:\n\ni. `k = 1`\nii. `k = 3`\niii. `k = 5`\n\n\nReflection questions: \n\n* Did you choose the closest neighbors based on the `year_aired` or the `imdb_rating` or a combination of the two?\n* Were there any major difficulties in deciding on the closest observations?\n\n\n**Your turn 3**: Quantitative variables should be standardized (normalized) before training (fitting) a KNN classifier. Explain in your own words why this is recommended.\n\n\n\n### A little more data wrangling\n\nBefore going any farther we should standardize the predictor variables.\nWhen making predictions we want to use the same data wrangling steps, and use the mean and standard deviations from the training set to standardize the predictor variables in the testing set to avoid \"data leakage\". To do this, we will create a **recipe** using the {recipes} package from the {tidymodels} framework. A recipe is a way to specify a sequence of data wrangling steps that can be applied to a data set. The recipe will be used to prepare the training data set, and then it will be \"baked\" to apply the same steps to the testing data set. This ensures that the same transformations are applied to both training and testing data sets, which is crucial for model performance.\n\nTo begin a recipe, specify a formula that describes the response variable and the predictor variables. The response variable is placed to the left of the `~` and the predictors are placed on the right separated by `+`. Additional data processing steps are added with `step_*()` functions. For example, the `step_naomit()` function allows us to remove rows with missing values and the `step_normalize()` function allows us to standardize the variables.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Recipe definition\nknn_recipe <- recipe(monster_real ~ imdb + year_aired, data = scooby_train) |>\n  step_normalize(all_numeric_predictors()) |>\n  step_naomit(all_predictors())\n```\n:::\n\n\n\nTo view the results, we need to `prep()` and `bake()` the recipe. The `prep()` function prepares the recipe by calculating the necessary statistics (e.g., means and standard deviations) from the training data set, and the `bake()` function applies the same transformations to the training and testing data sets.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep(knn_recipe, training = scooby_train) |>\n  bake(new_data = scooby_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 375 × 3\n    imdb year_aired monster_real\n   <dbl>      <dbl> <fct>       \n 1 1.04       -1.57 fake        \n 2 0.636      -1.57 fake        \n 3 1.44       -1.57 fake        \n 4 0.369      -1.57 fake        \n 5 0.904      -1.57 fake        \n 6 1.17       -1.57 fake        \n 7 1.44       -1.57 fake        \n 8 1.04       -1.57 fake        \n 9 1.44       -1.57 fake        \n10 0.904      -1.51 fake        \n# ℹ 365 more rows\n```\n\n\n:::\n:::\n\n\n\n\n**Your turn 4**: Create a scatterplot of `imdb_rating` vs `year` and color the points by `real_monster` using the updated (normalized) `scooby_train` data set.\n\n### Fitting a KNN classifier in the {tidymodels} framework\n\n\nNow that we have our data set ready, and we are familiar with the intuition behind KNN for classification, we can fit a KNN classifier using the {tidymodels} framework. For now, let's assume we are interested in `k = 3` nearest neighbors.\n\n\nAs in a KNN regression model we create a **model specification** using the `nearest_neighbor()` function. The key difference in the specification for a classification model is that we set the mode to `\"classification\"` instead of `\"regression\"`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Model specification\nknn_spec <- nearest_neighbor(neighbors = 3) |>\n  set_mode(\"classification\") |>\n  set_engine(\"kknn\")\n```\n:::\n\n\n\nAs with KNN regression we next create a **workflow**, which combines a model specification and a recipe into a single object. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Workflow definition\nknn_wflow <- workflow() |>\n  add_recipe(knn_recipe) |>\n  add_model(knn_spec)\n```\n:::\n\n\n\nFinally, we fit our model to the training set using the `fit()` function. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Model training\n(knn_model <- fit(knn_wflow, data = scooby_train))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: nearest_neighbor()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n2 Recipe Steps\n\n• step_normalize()\n• step_naomit()\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:\nkknn::train.kknn(formula = ..y ~ ., data = data, ks = min_rows(3,     data, 5))\n\nType of response variable: nominal\nMinimal misclassification: 0.1333333\nBest kernel: optimal\nBest k: 3\n```\n\n\n:::\n:::\n\n\n\n\n### Making predictions and evaluating performance\n\nTo obtain the predicted class labels we can use the `augment()` function, which adds columns for the predicted class labels (`.pred_class`), the predicted probabilities of an observation being in that class (`.pred_fake` and `.pred_real` here) to the specified data set. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(knn_model, new_data = scooby_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 126 × 8\n   .pred_class .pred_fake .pred_real year_aired  imdb monster_real title        \n   <fct>            <dbl>      <dbl>      <dbl> <dbl> <fct>        <chr>        \n 1 fake                 1          0       1969   8.1 fake         What a Night…\n 2 fake                 1          0       1969   8   fake         Hassle in th…\n 3 fake                 1          0       1969   7.5 fake         Decoy for a …\n 4 fake                 1          0       1969   8.2 fake         Foul Play in…\n 5 fake                 1          0       1969   8.1 fake         The Backstag…\n 6 fake                 1          0       1969   8.5 fake         A Gaggle of …\n 7 fake                 1          0       1970   8.7 fake         A Night of F…\n 8 fake                 1          0       1970   8.3 fake         Nowhere to H…\n 9 fake                 1          0       1970   8.5 fake         Jeepers, It'…\n10 fake                 1          0       1970   7.9 fake         A Tiki Scare…\n# ℹ 116 more rows\n# ℹ 1 more variable: suspects_amount <dbl>\n```\n\n\n:::\n:::\n\n\n\n**Your turn 5**: Use the `augment()` function and fill in the plotting template to create a jittered scatterplot of the predicted probabilities of being a real monster (`.pred_real`) vs. the predicted probabilities of being a fake monster (`.pred_fake`). Color the points by `monster_real`. What do you observe?\n\n\n\n\n**Your turn 6**: The below code creates a table of the predicted class labels and the actual class labels. What is the accuracy of your model? Report both the numeric value and give an interpretation of what accuracy means.\n\n\n**Your turn 7**: Sensitivity is the proportion of true positives that are correctly identified (the true positive rate). \n\n* What is a positive prediction in this KNN model? \n* How do we interpret sensitivity in this context? \n* Can you think of an example where sensitivity is more important than accuracy?\n* Use the above table to calculate the sensitivity of your model.\n\n\n**Your turn 8**: Specificity is the proportion of true negatives that are correctly identified (the true negative rate). \n\n* What is a negative prediction in this KNN model? \n* How do we interpret specificity in this context? \n* Can you think of an example where specificity is more important than accuracy?\n* Use the above table to calculate the specificity of your model.\n  \n\nWhile you should be able to calculate accuracy, sensitivity, and specificity \"by hand\" from a summary table, the {yardstick} package (loaded with {tidymodels}) provides a number of functions to calculate these metrics. For example, the `accuracy()` function takes a tibble with the predicted class labels and the actual class labels as arguments and returns the accuracy of the model. Similarly, the `sensitivity()` (also `sens()`) and `specificity()` (`spec()`) functions take a tibble with the predicted class labels and the actual class labels as arguments and return the sensitivity and specificity of the model, respectively.\n\nRun the below code to check your calculations from above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscooby_test_aug <- augment(knn_model, new_data = scooby_test)\nscooby_test_aug |> accuracy(truth = monster_real, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.833\n```\n\n\n:::\n\n```{.r .cell-code}\nscooby_test_aug |> sensitivity(truth = monster_real, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric     .estimator .estimate\n  <chr>       <chr>          <dbl>\n1 sensitivity binary         0.939\n```\n\n\n:::\n\n```{.r .cell-code}\nscooby_test_aug |> specificity(truth = monster_real, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric     .estimator .estimate\n  <chr>       <chr>          <dbl>\n1 specificity binary         0.464\n```\n\n\n:::\n:::\n\n\n\n\n\nNote: We can also make predictions for all observations in the testing data set using the `predict()` function. The `predict()` function takes a fitted model object and a new data set as arguments, and it returns a tibble with the predicted class labels as the only column. While we will typically use `augment()` to get the predicted class labels along with the original data set, `predict()` is useful when we **only** want the predicted class labels. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(knn_model, new_data = scooby_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 126 × 1\n   .pred_class\n   <fct>      \n 1 fake       \n 2 fake       \n 3 fake       \n 4 fake       \n 5 fake       \n 6 fake       \n 7 fake       \n 8 fake       \n 9 fake       \n10 fake       \n# ℹ 116 more rows\n```\n\n\n:::\n:::\n\n\n\n## Review exercise\n\n\n\nYou now know the basics of KNN models for classification and how to fit them using the {tidymodels} framework. You also know how to make predictions and evaluate the model performance using accuracy, sensitivity, and specificity. To see if this make sense, complete the following exercise:\n\nFit a KNN model with `k = 5` using `imdb`, `year`, and `suspects_amount` to predict whether a monster is real (`monster_real`). Calculate the model's accuracy, sensitivity, and specificity on the test set and write a brief summary of your findings. \n  * How does the model perform compared to the model with `k = 3`?\n  * What do you think about the number of snacks as a predictor variable?\n  * Do you think KNN is a good model for this data set? Why or why not?\n  \n  \n## Functions introduced\n\n\n* `initial_split()`: Creates a training/testing split of a data set\n* `training()`, `testing()`: Extracts the training and testing data sets from a split\n* `step_normalize(all_numeric_predictors()) `: Standardizes all numeric predictors in a recipe\n* `step_naomit(all_predictors())`: Removes rows with missing values in a recipe\n* `prep()`, `bake()`: Prepares a recipe and applies it to a data set\n* `conf_mat()`, `accuracy()`, `sensitivity()`, `specificity()`: Functions to calculate confusion matrix, accuracy, sensitivity, and specificity\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}